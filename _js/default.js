$(document).ready(function() {

	//Initialize tooltip funtionality
		$(document).tooltip({
			position: {
				my: "left bottom-10",
				at: "left+10 top"
			}
		});

	//For all elements having a class of toggleContainerTrigger, and not having an existing title attribute, a title attribute indicating that they control expandable sections
		$(".toggleContainerTrigger").filter("[title=''],:not([title])").attr("title","Click to expand...")

	//Toggle containers
		//Hide any elements with a 'toggleContainer' class
			$(".toggleContainer").hide();
		//Attach a function to any elements with a class of 'toggleContainerTrigger', which will toggle the next following toggleContainer class element on or off when clicked.
			$(".toggleContainerTrigger").click(function(){
				console.log($(this).nextAll(".toggleContainer").first().html());
				$(this).toggleClass("active").nextAll(".toggleContainer").first().slideToggle("fast");
			});					

	//Output save file funtionality
		//Create variable to store output string
			var outputString = "";
		//Create variable to store output file data
			var outputFile = null;
		//Function to populate the output file data variable
			function makeOutputFile(text) {
				//Create data variable as a blob
					var data = new Blob([text], {type: 'text/plain'});
				// If we are replacing a previously generated file we need to manually revoke the object URL to avoid memory leaks.
					if (outputFile !== null) {
						window.URL.revokeObjectURL(outputFile);
					}
				//Create data URL 
					outputFile = window.URL.createObjectURL(data);
				//Return output file data URL
					return outputFile;
			};
		//Create output file button functionality
			$("#createOutputFile").on("click",function(){
				//Create output string
					//Clear existing output string
						outputString="";
					//Get output table element
						var table = document.getElementById("output");
					//Loop through output table rows
						for (var i = 0, row; row = table.rows[i]; i++) {
							//rows would be accessed using the "row" variable assigned in the for loop
							//Debug info
								console.log("Row: " + i);
							//Loop through table row cells
								for (var j = 0, col; col = row.cells[j]; j++) {
									//columns would be accessed using the "col" variable assigned in the for loop
									//Debug info
										console.log("Column: " + j);
									//Build output string
										//Check to make sure the current cell does not specify a 'noOutput' class
											if (!col.classList.contains("noOutput")) {
												//If this is not the first field, prefix with a comma to take care of the delimiter between this and the previous field
													if (j>0) {
														outputString += ",";
													}
												//Append cell data to output
													outputString += "\"" + col.innerHTML.replace(/&amp;/g, "&") + "\"";
											}
								}
							//Append row delimiter
								outputString += "\n";
						}
						//Output debugn info
							console.log(outputString);
				//Set the download link href to a data URL generated by the makeOutputFile function, then make the link visible.
					$("#downloadLink").attr("href",makeOutputFile(outputString)).css("display","inline");
			});

	//Output table delete row buttons
		$("table#output").on("click", ".deleteRow", function(){
			//Confirm delete command
				if (confirm("Are you sure you want to delete this row?")) {
					//Remove the element
						//$(this).parent().parent().remove();
					//Slowly fade the element out, then remove it
						$(this).parent().parent().hide("",function(){this.remove()});
					//Hide download link
						$("#downloadLink").css("display","none");
				}
		});

	//Validate URL function
		function fnValidateURL(textval) {
		    var urlregex = /^(https?|ftp):\/\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\/($|[a-zA-Z0-9.,?'\\+&%$#=~_-]+))*$/;
		    return urlregex.test(textval);
		}

	//Example link click function
		$(".exampleLink").on("click",function(event){
			//Confirm function is firing
				console.log("You clicked an example link.")
			//Prevent default action
				event.preventDefault();
			//Output debug link info
				console.log("Setting input fields as follows:\n" + "Business Unit: " + $(this).attr("data-unit") + "\n" + "Business Unit Subgroup: " + $(this).attr("data-department") + "\n" + "Protocol: " + $(this).attr("data-protocol") + "\n" + "Target URL: " + $(this).attr("data-url") + "\n" + "Medium: " + $(this).attr("data-medium") + "\n" + "Source: " + $(this).attr("data-source") + "\n" + "Campaign: " + $(this).attr("data-campaign") + "\n" + "Content: " + $(this).attr("data-content") + "\n" + "Term: " + $(this).attr("data-term"));
			//Set field values
				$("#unit").val($(this).attr("data-unit"));
				$("#department").val($(this).attr("data-department"));
				$("#protocol").val($(this).attr("data-protocol"));
				$("#url").val($(this).attr("data-url"));
				$("#medium").val($(this).attr("data-medium"));
				$("#source").val($(this).attr("data-source"));
				$("#campaign").val($(this).attr("data-campaign"));
				$("#term").val($(this).attr("data-term"));
				$("#content").val($(this).attr("data-content"));
			//Call generate campaign URL function
				fnGenerateCampaignURL();
		});

	//Medium select element change function
		$("#url").on("change",function(){
			//If URL field starts with http:// or https:// 
				//Does URL starts with http://?
					if ($(this).val().substring(0, 7)=="http://") {
						//set protocol drop-down to http://
							$("#protocol").val("http://");
						//Remove substring from URL box
							$("#url").val($(this).val().substring(7));
					}
				//Does URL starts with https://?
					if ($(this).val().substring(0, 8)=="https://") {
						//set protocol drop-down to http://
							$("#protocol").val("https://");
						//Remove substring from URL box
							$("#url").val($(this).val().substring(8));
					}
		});

	//Medium select element change function
		$("#medium").on("change",function(){
			//If user seleted social...
				if ($(this).val()=="social") {
					//source is required
						$("#headerSource").addClass("required");
					//Update source field label
						//$("#labelSource").html("Where will this link be provided? On What platform?");
				} else {
					//source is not required
						$("#headerSource").removeClass("required");
					//Update source field label
						//$("#labelSource").html("Where will this link be provided?");
				}
			//If user selected email...
				if ($(this).val()=="email") {
					//Update source field label
						//$("#labelSource").html("Where will this link be provided? In what email?");
				} else {
					//Update source field label
						//$("#labelSource").html("Where will this link be provided?");	
				}
			//If user selected print...
				if ($(this).val()=="print") {
					//Update source field label
						//$("#labelSource").html("Where will this link be provided? In what publication/document?");
				} else {
					//Update source field label
						//$("#labelSource").html("Where will this link be provided?");
				}
		});

	//Clear form button click function
		$("#clearForm").on("click",function(){
			//Confirm function is firing
				console.log("You clicked the clear form button.")
			//Confirm clear fields command
				if (confirm("Are you sure you want to clear all fields?")) {
					//Clear all field values
						$("#unit").val("");
						$("#department").val("");
						$("#protocol").val("");
						$("#url").val("");
						$("#medium").val("");
						$("#source").val("");
						$("#campaign").val("");
						$("#term").val("");
						$("#content").val("");
				}
		});

	//Generate button click function
		$("#generate").on("click",function(){
			//Confirm function is firing
				console.log("You clicked the generate button.")
			//Call generate campaign URL function
				fnGenerateCampaignURL();
		});

	//Delete all rows button click function
		$("#deleteAllRows").on("click",function(){
			//Confirm function is firing
				console.log("You clicked the delete all rows button.")
			//Delete all table rows
				//Confirm delete command
					if (confirm("Are you sure you want to delete all rows?")) {
						//Remove the element
							//$(this).parent().parent().remove();
						//Slowly fade the element out, then remove it
							$("table#output tbody tr").hide("",function(){this.remove()});
						//Hide download link
							$("#downloadLink").css("display","none");
						//Hide delete all rows button
							$("#deleteAllRows").css("display","none");
					}
		});

	//Generate campaign URL function
		function fnGenerateCampaignURL(){
			//Confirm function is firing
				console.log("Generating Campaign URL.");
			//Save field values to variables (trim the strings and replace spaces with plus signs)
				var unit = $("#unit").val().trim().toLowerCase().replace(/ /g, "+");
				var department = $("#department").val().trim().toLowerCase().replace(/ /g, "+");
				var url = $("#protocol").val() + $("#url").val().trim().toLowerCase().replace(/ /g, "+");
				var medium = $("#medium").val().trim().toLowerCase().replace(/ /g, "+");
				var source = $("#source").val().trim().toLowerCase().replace(/ /g, "+");
				var campaign = $("#campaign").val().trim().toLowerCase().replace(/ /g, "+");
				var content = $("#content").val().trim().toLowerCase().replace(/ /g, "+");
				var term = $("#term").val().trim().toLowerCase().replace(/ /g, "+");
			//Output debug info
				console.log("Variables set as follows:\n" + "Mason Unit: " + unit + "\n" + "Mason Department: " + department + "\n" + "Target URL: " + url + "\n" + "Medium: " + medium + "\n" + "Source: " + source + "\n" + "Campaign: " + campaign + "\n" + "Content: " + content + "\n" + "Term: " + term);
			//Generate URL
				//Initialize variables
					var source_prefix = "";
					var tagged_url = "";
					var error_message = "";
				

				//Do we have a valid URL?
					if (!fnValidateURL(url)) {
						console.log("The target URL provided is NOT a valid URL.");
						error_message = "The target URL provided is NOT a valid URL.";	
					}

				//If user selected medium=social, then require a specific source value
					if (medium=="social") {
						if (source.length==0) {
							console.log("We DO NOT have all required fields.");
							error_message = "Missing required fields. If you are using medium=\"social\", you need to specify a source.";
						}
					}

				//Prepare source prefix
					//prefix with Mason unit, if it exists
						if (unit.length>0) {
							source_prefix = unit + "-"
						}
					//prefix with Mason department, if it exists
						if (department.length>0) {
							source_prefix += department + "-"
						}
				//Build complete source parameter
					source = source_prefix + source;
				//Trim trailing hypen from source, if necessary
					if (source.substring(source.length-1)=="-") {
						//Trim last character
							source = source.slice(0, -1);
					}
				
				//Do we have all other required fields?
					if (!(medium.length>0 && source.length>0 && campaign.length>0)) {
						console.log("We DO NOT have all required fields.");
						error_message = "Missing required fields.";
					}

				//If we have not seen any errors...
					if (error_message.length==0) {
						//Output process info
							console.log("We have all required fields.");
						//Generate tagged URL
							console.log("Generating URL");
							//Begin tagged URL
								tagged_url = url;
							//Do we have a question mark in the URL already?
								if (url.includes("?")) {
									//Begin parameters with an ampersand
										tagged_url += "&"
								}
								else {
									//Begin parameters with a question mark
										tagged_url += "?"
								}
							//Add medium
								tagged_url += "utm_medium=" + medium;
							//Add source
								tagged_url += "&utm_source=" + source;
							//Add campaign
								tagged_url += "&utm_campaign=" + campaign;
							//Add content (optional)
								if (content.length>0) {
									tagged_url += "&utm_content=" + content;
								}
							//Add term (optional)
								if (term.length>0) {
									tagged_url += "&utm_term=" + term;
								}
					}

				//If we have a tagged_url result, display it
					if (tagged_url.length>0) {
						//Set output element value
							$("table#output tbody").append("<tr><td>" + url + "</td><td>" + medium + "</td><td>" + source + "</td><td>" + campaign + "</td><td>" + content + "</td><td>" + term + "</td><td>" + tagged_url + "</td><td class='noOutput'><button class='deleteRow'>Delete</button></td></tr>");
						//Hide download link
							$("#downloadLink").css("display","none");
						//Show 'delete all rows' button
							$("#deleteAllRows").css("display","inline");
					}

				//If we have an error message, display it
					if (error_message.length>0) {
						//Set error message element value
							$("#error").html("<p><strong>Error:</strong> " + error_message + "</p>");
					} else {
						//Clear output element value
							$("#error").empty();
					}
		}

});